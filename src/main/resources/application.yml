# ServerProperties
server:
  port: 8080
  servlet:
    context-path: /community

spring:
  # ThymeleafProperties
  thymeleaf:
    cache: false
  # DataSource
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/community?characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    type: com.zaxxer.hikari.HikariDataSource # 数据源类型
    hikari:
      maximum-pool-size: 15
      minimum-idle: 5
      idle-timeout: 30000
  # MailProperties
  mail:
    host: smtp.sina.com
    port: 465  # 一般都是465
    username: zhaoyan346a@sina.com
    password: 6afaa8d90f129281    # 注意：password是授权密码，不是邮箱账户的密码
    protocol: smtps  # 加密的smtp
    properties:
      mail.smtp.ssl.enable: true  # 使用安全连接
  # RedisProperties.class
  # windows启动redis: redis-server.exe redis.windows.conf
  # 连接redis: redis-cli.exe -h localhost -p 6379
  # 关闭redis: redis-cli -h 127.0.0.1 -p 6379 shutdown
  redis:
    host: localhost # redis服务器的ip地址
    port: 6379 # 端口
    database: 11 # 用11号数据库

  # KafkaProperties
  # windows下对kafka的操作
  # zookeeper的默认端口是2181，kafka的默认端口是9092
  # 修改zookeeper.perpties(zookeeper的) : dataDir=F:\javaweb\projectSpace\data\zookeeper
  # 修改server.properties(kafka的): log.dirs=F:\javaweb\projectSpace\data\kafka-logs
  # 1、启动zookeeper : bin/windows/zookeeper-server-start.bat config/zookeeper.properties
  # 2、启动kafka：bin/windows/kafka-server-start.bat config/server.properties
  # 创建主题：创建有1个副本，1个分区的引导服务器为localhost:9092的名为test的主题
  # kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test
  # 查看指定服务器的所有主题：
  # kafka-topics.bat --list --bootstrap-server localhost:9092
  # 发送消息：
  # kafka-console-producer.bat --broker-list localhost:9092 --topic test
  # 接收消息：
  # kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginning
  kafka:
    bootstrap-servers: localhost:9092 #引导服务器列表
    consumer:
      group-id: community-consumer-group #消费者分组ID
      enable-auto-commit: true #自动提交消费者偏移量
      auto-commit-interval: 3000 #自动提交频率  3000ms(3s)
  # Elasticsearch.properties
  data:
    elasticsearch:
      cluster-name: nowcoder # 集群名字
      cluster-nodes: 127.0.0.1:9300 #集群的节点，多个节点用逗号分隔符。9200是http端口；9300是tcp端口
  task:
    # TaskExecutionProperties  Spring线程池配置
    execution:
      pool:
        core-size: 5 # 核心线程数
        max-size: 15 # 最大线程数
        queue-capacity: 100 # 队列容量
    # TaskSchedulingProperties Spring定时线程池配置
    scheduling:
      pool:
        size: 5 # 定时线程池线程个数
  # QuartzProperties 分布式定时任务Quartz的配置
  # 数据库中有数据的表：
  # qrtz_job_details  qrtz_locks  qrtz_scheduler_state  qrtz_simple_triggers  qrtz_triggers  qrtz_fired_triggers
  quartz:
    job-store-type: jdbc # job存储类型
    scheduler-name: communityScheduler # 调度器名字
    properties:
      org:
        quartz:
          scheduler:
            instanceId: AUTO # 调度器实例ID：自动生成
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX # 存储job的类
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate # 存储job的驱动类
            isClustered: true # 是否为集群
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool # 线程池类
            threadCount: 5 # 线程数量

# Mybatis
mybatis:
  mapper-locations:
    - classpath:mapper/*.xml
  type-aliases-package: com.nowcoder.community.entity  # 实体的包
  configuration:
    use-generated-keys: true  # 启用主键
    map-underscore-to-camel-case: true # user_info == userInfo

#  日志配置  使用logback-spring.xml 日志配置文件去设置吧
#logging:
#  level:
#    com.nowcoder.community: debug
#  file:
#    name: F:\javaweb\projectSpace\test.log

# community
community:
  path:
    domain: http://localhost:8080
    uploadPath: F:/javaweb/projectSpace/images
  #community.path.uploadPath=F:/javaweb/projectSpace/images

# wk配置
# 1、 https://wkhtmltopdf.org/downloads.html 下载安装WK
# 2、 将bin路径配置到环境变量中
# 给指定的网页生成 pdf 或者 图片
# 命令：wkhtmltopdf https://www.baidu.com F:/javaweb/projectSpace/data/wk-pdfs/1.pdf 生成pdf
# wkhtmltoimage https://www.baidu.com F:/javaweb/projectSpace/data/wk-images/1.png 生成image
# wkhtmltoimage --quality 75 https://www.baidu.com F:/javaweb/projectSpace/data/wk-images/2.png  压缩到原来的75%
wk:
  image:
    command: F:/javaweb/wkhtmltopdf/bin/wkhtmltoimage # wk生成图片的命令地址
    storage: F:/javaweb/projectSpace/data/wk-images # wk生成图片的存放地址

# qiniu
#  qiniu.key.access=6RA-Uus95ZT_1znMrCMD8BpqfjT-K7OKmQTfKB48
#  qiniu.key.secret=kPNnLFz2_tzztKUVpSLm0lYngtuHWyIq5LzTmLIL
#  qiniu.bucket.header.name=community_header
#  quniu.bucket.header.url=http://pvghrij81.bkt.clouddn.com
#  qiniu.bucket.share.name=community_share
#  qiniu.bucket.share.url=http://pvghvvuzm.bkt.clouddn.com